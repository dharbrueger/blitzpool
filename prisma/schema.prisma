// This is the Prisma schema file,
// learn more about from the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  memberships   Membership[]
  commissioner  Pool[]       @relation("Commissioner")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id               String  @id @default(cuid())
  slug             String
  location         String
  name             String
  nickname         String
  abbreviation     String
  displayName      String
  shortDisplayName String
  color            String
  alternateColor   String
  isActive         Boolean
}

model Pool {
  id             String       @id @default(cuid())
  name           String       @unique
  private        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  typeId         String
  type           PoolType     @relation(fields: [typeId], references: [id])
  commissionerId String
  commissioner   User         @relation("Commissioner", fields: [commissionerId], references: [id])
  members        Membership[]
}

model PoolType {
  id    String @id @default(cuid())
  name  String @unique
  pools Pool[]
}

model Membership {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  poolId    String
  user      User     @relation(fields: [userId], references: [id])
  pool      Pool     @relation(fields: [poolId], references: [id])
}

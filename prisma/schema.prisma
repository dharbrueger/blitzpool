// This is the Prisma schema file,
// learn more about from the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  picks         Pick[]
  pools         PoolMember[]
  UserPool      UserPool[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id               String  @id @default(cuid())
  slug             String
  location         String
  name             String
  nickname         String
  abbreviation     String
  displayName      String
  shortDisplayName String
  color            String
  alternateColor   String
  isActive         Boolean
  gamesHome        Game[]  @relation("HomeTeam")
  gamesAway        Game[]  @relation("AwayTeam")
  Pick             Pick[]
}

model Game {
  id                  String   @id @default(cuid())
  weekNumber          Int
  homeTeamId          String
  awayTeamId          String
  gameDate            DateTime
  resultHomeTeamScore Int?
  resultAwayTeamScore Int?
  homeTeam            Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam            Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  picks               Pick[]
  gameType            GameType @relation(fields: [gameTypeId], references: [id])
  gameTypeId          String
}

model Pick {
  id           String @id @default(cuid())
  userId       String
  gameId       String
  pickedTeamId String
  user         User   @relation(fields: [userId], references: [id])
  game         Game   @relation(fields: [gameId], references: [id])
  pickedTeam   Team   @relation(fields: [pickedTeamId], references: [id])
}

model GameType {
  id       String @id @default(cuid())
  typeName String
  games    Game[]
}

model UserPool {
  id        String       @id @default(cuid())
  userId    String
  poolName  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   PoolMember[]
  user      User         @relation(fields: [userId], references: [id])
}

model PoolMember {
  id         String   @id @default(cuid())
  userPoolId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  userPool   UserPool @relation(fields: [userPoolId], references: [id])
}
